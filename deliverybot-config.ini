[GLOBAL]
sleepTime_ASF = 50
sleepTime_Control = 30
sleeptime_PF = 50
sleeptime_React = 50

[TRUCK_BOT]
COM_port_wheels = COM9
COM_port_pivot = \\.\COM11
speed_x = 1.0
speed_y = 0.6

# Currently hard-coded in TruckData.h
# [TRUCK_BOT_CON]
# EncoderStepPerMeter = 151440.4
# EncoderStepPreRad = 320.22
# wheelDistance = 0.4235
# Speed_coeff = 1666 // the speed sent to the board will be calculated by [ = speed_coeff * speed (in m/s) ]
# Speed_limit = 1000 // limitation of a speed that will be send to the wheels

# =======================================================================
#  LIDAR SENSOR: This section must be named "LIDAR_SECTION" for 
#   the app icp-slam-live. See docs and examples of how to set up 
#   other LIDAR sensors in [MRPT]/share/mrpt/config_files/rawlog-grabber/
# =======================================================================
[LIDAR_SENSOR]
driver			= CRoboPeakLidar
process_rate		= 90		// Hz

sensorLabel  		= RP_LIDAR
pose_x			= 0	// Laser range scaner 3D position in the robot (meters)
pose_y			= 0
pose_z			= 0
# pose_z		= 0.21
pose_yaw		= 0	// Angles in degrees
pose_pitch		= 0
pose_roll		= 0
max_length		= 5.6

preview			= 0

COM_port_WIN			= COM4
COM_port_LIN			= ttyACM0
# Optional: Exclusion zones to avoid the robot seeing itself:
#exclusionZone1_x = -0.20 -0.20 0.05  0.05
#exclusionZone1_y = -0.20  0.20 0.20 -0.20
# Optional: Exclusion zones to avoid the robot seeing itself:
#exclusionAngles1_ini = 20  // Deg
#exclusionAngles1_end = 25  // Deg

[ODOMETRY_PARAMS]
minStdXY  = 0.02
minStdPhi = 4

[PFLOCALIZER]
# Initial number of particles (if dynamic sample size is enabled, the population may change afterwards).
particles_count=20000

# 1: Uniform distribution over the range, 0: Uniform distribution over the free cells of the gridmap in the range:
init_PDF_mode=0
init_PDF_min_x=-200
init_PDF_max_x=200
init_PDF_min_y=-200
init_PDF_max_y=200

#---------------------------------------------------------------------------
# Section: [KLD_options]
# Use: Options for the adaptive sample size KLD-algorithm
# Refer to paper:
# D. Fox, W. Burgard, F. Dellaert, and S. Thrun, "Monte Carlo localization:
# Efficient position estimation for mobile robots," Proc. of the
# National Conference on Artificial Intelligence (AAAI),v.113, p.114,1999.
#---------------------------------------------------------------------------
[KLD_options]
KLD_binSize_PHI_deg=10
KLD_binSize_XY=0.10
KLD_delta=0.01
KLD_epsilon=0.01
KLD_maxSampleSize=20000
KLD_minSampleSize=150
KLD_minSamplesPerBin=0   

#---------------------------------------------------------------------------
# Section: [PF_options]
# Use: The parameters for the PF algorithms
#---------------------------------------------------------------------------
[PF_options]
# The Particle Filter algorithm:
#	0: pfStandardProposal	  ***
#	1: pfAuxiliaryPFStandard
#	2: pfOptimalProposal    
#	3: pfAuxiliaryPFOptimal	  ***
#
PF_algorithm=0

# The Particle Filter Resampling method:
#	0: prMultinomial
#	1: prResidual
#	2: prStratified
#	3: prSystematic
resamplingMethod=0

# Set to 1 to enable KLD adaptive sample size:
adaptiveSampleSize=1

# Only for algorithm=3 (pfAuxiliaryPFOptimal)
pfAuxFilterOptimal_MaximumSearchSamples=10

# Resampling threshold
BETA=0.5

# Number of particles (IGNORED IN THIS APPLICATION, SUPERSEDED BY "particles_count" below)
sampleSize=1

# ====================================================
#
#            MULTIMETRIC MAP CONFIGURATION
#
# ====================================================
[MetricMap]
# Creation of maps:
occupancyGrid_count=1
gasGrid_count=0
landmarksMap_count=0
pointsMap_count=0
beaconMap_count=0

# Selection of map for likelihood: (fuseAll=-1,occGrid=0, points=1,landmarks=2,gasGrid=3)
likelihoodMapSelection=-1

# Enables (1) / Disables (0) insertion into specific maps:
enableInsertion_pointsMap=1
enableInsertion_landmarksMap=1
enableInsertion_gridMaps=1
enableInsertion_gasGridMaps=1
enableInsertion_beaconMap=1

[MapFiles]
mapFile=main_map.png
imgResolution=0.04

# ====================================================
#   MULTIMETRIC MAP: OccGrid #00
# ====================================================
# Creation Options for OccupancyGridMap 00:
[MetricMap_occupancyGrid_00_creationOpts]
resolution=0.04

# Insertion Options for OccupancyGridMap 00:
[MetricMap_occupancyGrid_00_insertOpts]
mapAltitude=0
useMapAltitude=0
maxDistanceInsertion=30
maxOccupancyUpdateCertainty=0.54
considerInvalidRangesAsFreeSpace=1
minLaserScanNoiseStd=0.001

# Likelihood Options for OccupancyGridMap 00:
[MetricMap_occupancyGrid_00_likelihoodOpts]
likelihoodMethod=4		// 0=MI, 1=Beam Model, 2=RSLC, 3=Cells Difs, 4=LF_Trun, 5=LF_II

LF_decimation=20
LF_stdHit=0.20
LF_maxCorrsDistance=0.30
LF_zHit=0.95
LF_zRandom=0.05
LF_maxRange=80
LF_alternateAverageMethod=0

MI_exponent=10
MI_skip_rays=10
MI_ratio_max_distance=2
				
rayTracing_useDistanceFilter=0
rayTracing_decimation=10
rayTracing_stdHit=0.30

consensus_takeEachRange=30
consensus_pow=1


# ------------------------------------------------------------------------
# Reactive Navigation Config
# ------------------------------------------------------------------------

# Max linear vel (m/s):
@define ROBOT_MAX_V  0.5        
# Max angular vel (deg/s):
@define ROBOT_MAX_W  40.0        
# Max distance to "foresee" obstacles (m):
@define NAV_MAX_REF_DIST   5.5

[CAbstractNavigator]
dist_to_target_for_sending_event                  = 0.000000             // Default value=0, means use the `targetAllowedDistance` passed by the user in the navigation request.
alarm_seems_not_approaching_target_timeout        = 30.000000            // navigator timeout (seconds) [Default=30 sec]
dist_check_target_is_blocked                 = 2.0       // When closer than this distance, check if the target is blocked to abort navigation with an error
hysteresis_check_target_is_blocked           = 3         // How many steps should the condition for dist_check_target_is_blocked be fulfilled to raise an event


[CWaypointsNavigator]
max_distance_to_allow_skip_waypoint               = -1.000000            // Max distance to `foresee` waypoints [meters]. (<0: unlimited)
min_timesteps_confirm_skip_waypoints              = 1                    // Min timesteps a `future` waypoint must be seen as reachable to become the active one.
waypoint_angle_tolerance                          = 5.0                  // Angular error tolerance for waypoints with an assigned heading [deg]
multitarget_look_ahead   = 0  // >=0 number of waypoints to forward to the underlying navigation engine, to ease obstacles avoidance when a waypoint is blocked (Default=0 : none).


[CAbstractPTGBasedReactive]
robotMax_V_mps                                    = ${ROBOT_MAX_V}       // Max. linear speed (m/s) [Default=-1 (not set), will raise exception if needed and not set]
robotMax_W_degps                                  = ${ROBOT_MAX_W}       // Max. angular speed (rad/s) [Default=-1 (not set), will raise exception if needed and not set]
#robotMinCurvRadius                                = -1.000000            // Min. radius of curvature of paths (m) [Default=-1 (not set), will raise exception if needed and not set]

holonomic_method                                  = CHolonomicFullEval   // C++ class name of the holonomic navigation method to run in the transformed TP-Space.
# List of known classes:
# - `CHolonomicFullEval`
# - `CHolonomicND`
# - `CHolonomicVFF`


motion_decider_method                             = CMultiObjMotionOpt_Scalarization // C++ class name of the motion decider method.
# List of known classes:
# - `CMultiObjMotionOpt_Scalarization`


ref_distance                                      = ${NAV_MAX_REF_DIST}   // Maximum distance up to obstacles will be considered (D_{max} in papers).
#speedfilter_tau                                   = 0.000000             // Time constant (in seconds) for the low-pass filter applied to kinematic velocity commands (default=0: no filtering)
secure_distance_start                             = 0.050000             // In normalized distance [0,1], start/end of a ramp function that scales the holonomic navigator output velocity.
secure_distance_end                               = 0.150000             // In normalized distance [0,1], start/end of a ramp function that scales the holonomic navigator output velocity.
use_delays_model                                  = false                // Whether to use robot pose inter/extrapolation to improve accuracy (Default:false)
max_distance_predicted_actual_path                = 0.150000             // Max distance [meters] to discard current PTG and issue a new vel cmd (default= 0.05)
min_normalized_free_space_for_ptg_continuation    = 0.200000             // Min normalized dist [0,1] after current pose in a PTG continuation to allow it.

#enable_boost_shortest_eta                         = false                // (Default: false)
#best_eta_margin_tolerance_wrt_best                = 1.050000             // (Default: 1.05)

enable_obstacle_filtering                         = true                 // Enabled obstacle filtering (params in its own section)
evaluate_clearance                                = true

[CPointCloudFilterByDistance]
min_dist                                          = 0.100000            
angle_tolerance                                   = 5.000000            
too_old_seconds                                   = 1.000000            
previous_keyframes                                = 1                    // (Default: 1) How many previous keyframes will be compared with the latest pointcloud.
max_deletion_ratio                                = 0.400000             // (Default: 0.4) If the ratio [0,1] of points considered invalid (`deletion` ) is larger than this ratio, no point will be deleted since it'd be too suspicious and may indicate a failure of this filter.


[CHolonomicFullEval]
# [0]=Free space
# [1]=Dist. in sectors
# [2]=Closer to target (Euclidean)
# [3]=Hysteresis
# [4]=clearance along path
factorWeights                    = [0.25 , 0.1 , 1  , 0.05 , 0.5 ] 
factorNormalizeOrNot             = [0    , 0   , 0  , 0    , 1 ]

TOO_CLOSE_OBSTACLE                                = 0.150000             // Directions with collision-free distances below this threshold are not elegible.
TARGET_SLOW_APPROACHING_DISTANCE                  = 0.2                  // Start to reduce speed when closer than this to target. [m]
OBSTACLE_SLOW_DOWN_DISTANCE                       = 0.150000             // Start to reduce speed when clearance is below this value ([0,1] ratio wrt obstacle reference/max distance)
HYSTERESIS_SECTOR_COUNT                           = 5.000000             // Range of `sectors` (directions) for hysteresis over successive timesteps
LOG_SCORE_MATRIX                                  = false                // Save the entire score matrix in log files

clearance_threshold_ratio                         = 0.10                 // Ratio [0,1], times path_count, gives the minimum number of paths at each side of a target direction to be accepted as desired direction
gap_width_ratio_threshold                         = 0.20                 // Ratio [0,1], times path_count, gives the minimum gap width to accept a direct motion towards target.

PHASE_COUNT                                       = 2                    // Number of evaluation phases to run (params for each phase below)
PHASE1_FACTORS                                    = [1 2 3]                // Indices of the factors above to be considered in this phase
PHASE1_THRESHOLD                                  = 0.5                  // Phase scores must be above this relative range threshold [0,1] to be considered in next phase (Default:`0.75`)
PHASE2_FACTORS                                    = [2 0 4]                  // Indices of the factors above to be considered in this phase
PHASE2_THRESHOLD                                  = 0.5                  // Phase scores must be above this relative range threshold [0,1] to be considered in next phase (Default:`0.75`)


[CMultiObjectiveMotionOptimizerBase]
# Next follows a list of `score%i_{name,formula}` pairs for i=1,...,N
# Each one defines an exprtk formula for one of the scores that will be evaluated for each candidate movement.
# Multiobjective optimizers will then use those scores to select the best candidate, 
# possibly using more parameters that follow below.
# See list of all available variables in documentation of mrpt::nav::CAbstractPTGBasedReactive at http://reference.mrpt.org/devel/classmrpt_1_1nav_1_1_c_abstract_p_t_g_based_reactive.html

score1_name     = target_distance
score1_formula  = \
	var effective_trg_d_norm := max(0,target_d_norm-move_cur_d); \
	if(collision_free_distance>effective_trg_d_norm, \
		1/(1+effective_trg_d_norm^2), \
		0)

score2_name     = collision_free_distance_score
score2_formula  = \
	var effective_trg_d_norm := max(0,target_d_norm-move_cur_d); \
	if (collision_free_distance>(effective_trg_d_norm+0.05), \
		1.0, \
		collision_free_distance)

score3_name     = euclidean_nearness
score3_formula  = 1/(1+dist_eucl_min^2)

score4_name     = hysteresis_score
score4_formula  = hysteresis

score5_name     = path_index_near_target
score5_formula  = \
	var dif:=abs(target_k-move_k); \
	if (dif>(num_paths/2)) \
	{ \
		dif:=num_paths-dif; \
	}; \
	exp(-abs(dif / (num_paths/10.0)));
	
score6_name        = ptg_priority_score
score6_formula     = ptg_priority


# Next follows a list of `movement_assert%i` exprtk expressions for i=1,...,N
# defining expressions for conditions that any candidate movement must fulfill
# in order to get through the evaluation process. *All* assert conditions must be satisfied.
#movement_assert1 = XXX

# Comma-separated list of scores to normalize so the highest is 1.0.
scores_to_normalize  =  target_distance

[CMultiObjMotionOpt_Scalarization]
# A formula that takes all/a subset of scores and generates a scalar global score.
scalar_score_formula  = ptg_priority_score*( \
	0.3*target_distance + \
	0.5*collision_free_distance_score + \
	8.0*euclidean_nearness + \
	0.1 * hysteresis_score + \
	0.2*path_index_near_target \
	)


[CReactiveNavigationSystem]
min_obstacles_height                              = 0.000000             // Minimum `z` coordinate of obstacles to be considered fo collision checking
max_obstacles_height                              = 10.000000            // Maximum `z` coordinate of obstacles to be considered fo collision checking

# PTGs: See classes derived from mrpt::nav::CParameterizedTrajectoryGenerator ( http://reference.mrpt.org/svn/classmrpt_1_1nav_1_1_c_parameterized_trajectory_generator.html)
# refer to papers for details.
#------------------------------------------------------------------------------
PTG_COUNT = 3

PTG0_Type = CPTG_DiffDrive_C
PTG0_resolution = 0.05 # Look-up-table cell size or resolution (in meters)
PTG0_refDistance= ${NAV_MAX_REF_DIST} # Maximum distance to build PTGs (in meters), i.e. the visibility "range" of tentative paths
PTG0_num_paths= 121
PTG0_v_max_mps = ${ROBOT_MAX_V}
PTG0_w_max_dps = ${ROBOT_MAX_W}
PTG0_K = 1.0
PTG0_score_priority = 1.0
#PTG0_clearance_num_points = 10

PTG1_Type = CPTG_DiffDrive_alpha
PTG1_resolution = 0.05 # Look-up-table cell size or resolution (in meters)
PTG1_refDistance= ${NAV_MAX_REF_DIST} # Maximum distance to build PTGs (in meters), i.e. the visibility "range" of tentative paths
PTG1_num_paths = 121
PTG1_v_max_mps = ${ROBOT_MAX_V}
PTG1_w_max_dps = ${ROBOT_MAX_W}
PTG1_cte_a0v_deg = 57
PTG1_cte_a0w_deg = 57
PTG1_score_priority = 1.0
#PTG1_clearance_num_points = 10

PTG2_Type = CPTG_DiffDrive_C
PTG2_resolution = 0.05 # Look-up-table cell size or resolution (in meters)
PTG2_refDistance= ${NAV_MAX_REF_DIST} # Maximum distance to build PTGs (in meters), i.e. the visibility "range" of tentative paths
PTG2_num_paths = 121
PTG2_v_max_mps = ${ROBOT_MAX_V}
PTG2_w_max_dps = ${ROBOT_MAX_W}
PTG2_K = -1.0
PTG2_score_priority = 0.5
#PTG2_clearance_num_points = 10


# Default 2D robot shape for collision checks: (ignored in ROS, superseded by node parameters)
# Each PTG will use only one of either (a) polygonal 2D shape or, (b) radius of a circular shape
RobotModel_shape2D_xs=-0.15 0.15 0.15 -0.15
RobotModel_shape2D_ys=0.15 0.15 -0.15 -0.15
#RobotModel_circular_shape_radius = 0.15